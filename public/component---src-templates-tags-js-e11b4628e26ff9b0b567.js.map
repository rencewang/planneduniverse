{"version":3,"sources":["webpack:///./src/components/postcard.js","webpack:///./src/templates/tags.js","webpack:///./src/styles/postcard.module.css"],"names":["title","path","coverImage","location","type","date","className","style","post","postContent","to","fluid","childImageSharp","meta","tags","toKebabCase","toLowerCase","key","tag","postsQuery","Tags","data","pageContext","nextPagePath","previousPagePath","posts","allMarkdownRemark","edges","map","node","id","autoExcerpt","excerpt","frontmatter","author","previousPath","previousLabel","nextPath","nextLabel","module","exports"],"mappings":"8FAAA,2FAOe,gBAON,IANLA,EAMI,EANJA,MACAC,EAKI,EALJA,KACAC,EAII,EAJJA,WACAC,EAGI,EAHJA,SACAC,EAEI,EAFJA,KAEI,EADJC,KAGA,OACI,yBAAKC,UAAWC,IAAMC,MACtB,yBAAKF,UAAWC,IAAME,aACtB,yBAAKH,UAAU,YAEX,wBAAIA,UAAWC,IAAMP,OACjB,kBAAC,OAAD,CAAMU,GAAIT,GAAOD,IAGpBE,GACG,kBAAC,IAAD,CACIS,MAAOT,EAAWU,gBAAgBD,MAClCL,UAAWC,IAAML,aAIzB,yBAAKI,UAAWC,IAAMM,MACjBV,EACG,yBAAKG,UAAWC,IAAMO,MAClB,kBAAC,OAAD,CAAMJ,GAAE,UAAYK,sBAAYZ,GAAUa,cAAlC,IAAoDC,IAAKF,sBAAYZ,IACzE,0BAAMG,UAAWC,IAAMW,KAAMf,KAGrC,KAEHC,EACG,yBAAKE,UAAWC,IAAMO,MAClB,kBAAC,OAAD,CAAMJ,GAAE,SAAWK,sBAAYX,GAAMY,cAA7B,IAA+CC,IAAKF,sBAAYX,IACpE,0BAAME,UAAWC,IAAMW,KAAMd,KAGrC,W,kCC/CpB,2HA8Eae,GA9Eb,UA8EuB,cAmCRC,UAvGF,SAAC,GAGP,IAFLC,EAEI,EAFJA,KAEI,IADJC,YAAeC,EACX,EADWA,aAAcC,EACzB,EADyBA,iBAAkBN,EAC3C,EAD2CA,IAGjBO,EAC1BJ,EADFK,kBAAqBC,MAGvB,OACE,oCACE,kBAAC,IAAD,MACA,kBAAC,IAAD,KACE,yBAAKrB,UAAU,cAAf,mBACkB,kCAAQY,IAGzBO,EAAMG,KAAI,YAAe,IAAZC,EAAW,EAAXA,KAEVC,EAaED,EAbFC,GACSC,EAYPF,EAZFG,QAHqB,EAenBH,EAXFI,YACEjC,EALmB,EAKnBA,MACAK,EANmB,EAMnBA,KACAJ,EAPmB,EAOnBA,KACAiC,EARmB,EAQnBA,OACAhC,EATmB,EASnBA,WACA8B,EAVmB,EAUnBA,QACAlB,EAXmB,EAWnBA,KACAX,EAZmB,EAYnBA,SACAC,EAbmB,EAanBA,KAIJ,OACE,kBAAC,IAAD,CACEa,IAAKa,EACL9B,MAAOA,EACPK,KAAMA,EACNJ,KAAMA,EACNiC,OAAQA,EACRpB,KAAMA,EACNX,SAAUA,EACVC,KAAMA,EACNF,WAAYA,EACZ8B,QAASA,GAAWD,OAK1B,kBAAC,IAAD,CACEI,aAAcX,EACdY,cAAc,cACdC,SAAUd,EACVe,UAAU,oB,qBC9DpBC,EAAOC,QAAU,CAAC,KAAO,+BAA+B,MAAQ,gCAAgC,WAAa,qCAAqC,KAAO,+BAA+B,KAAO,+BAA+B,IAAM,8BAA8B,YAAc","file":"component---src-templates-tags-js-e11b4628e26ff9b0b567.js","sourcesContent":["import React from 'react'\nimport { Link } from 'gatsby'\nimport Img from 'gatsby-image'\nimport { toKebabCase } from '../helpers'\n\nimport style from '../styles/postcard.module.css'\n\nexport default ({\n    title,\n    path,\n    coverImage,\n    location,\n    type,\n    date,\n  }) => {\n\n    return (\n        <div className={style.post}>\n        <div className={style.postContent}>\n        <div className=\"postcard\">\n\n            <h1 className={style.title}>\n                <Link to={path}>{title}</Link>\n            </h1>\n\n            {coverImage && (\n                <Img\n                    fluid={coverImage.childImageSharp.fluid}\n                    className={style.coverImage}\n                />\n            )}\n\n            <div className={style.meta}>\n                {location ? (\n                    <div className={style.tags}>\n                        <Link to={`/place/${toKebabCase(location).toLowerCase()}/`} key={toKebabCase(location)}>\n                            <span className={style.tag}>{location}</span>\n                        </Link>\n                    </div>\n                ) : null}\n\n                {type ? (\n                    <div className={style.tags}>\n                        <Link to={`/type/${toKebabCase(type).toLowerCase()}/`} key={toKebabCase(type)}>\n                            <span className={style.tag}>{type}</span>\n                        </Link>\n                    </div>\n                ) : null}\n            </div>\n\n        </div>\n        </div>\n        </div>\n    )\n}","import React from 'react'\nimport PropTypes from 'prop-types'\nimport { graphql } from 'gatsby'\nimport SEO from '../components/seo'\nimport Layout from '../components/layout'\nimport Postcard from '../components/postcard'\nimport Navigation from '../components/navigation'\n\nimport '../styles/layout.css'\n\nconst Tags = ({\n  data,\n  pageContext: { nextPagePath, previousPagePath, tag },\n}) => {\n  const {\n    allMarkdownRemark: { edges: posts },\n  } = data\n\n  return (\n    <>\n      <SEO />\n      <Layout>\n        <div className=\"infoBanner\">\n          Posts with tag: <span>#{tag}</span>\n        </div>\n\n        {posts.map(({ node }) => {\n          const {\n            id,\n            excerpt: autoExcerpt,\n            frontmatter: {\n              title,\n              date,\n              path,\n              author,\n              coverImage,\n              excerpt,\n              tags,\n              location,\n              type,\n            },\n          } = node\n\n          return (\n            <Postcard\n              key={id}\n              title={title}\n              date={date}\n              path={path}\n              author={author}\n              tags={tags}\n              location={location}\n              type={type}\n              coverImage={coverImage}\n              excerpt={excerpt || autoExcerpt}\n            />\n          )\n        })}\n\n        <Navigation\n          previousPath={previousPagePath}\n          previousLabel=\"Newer posts\"\n          nextPath={nextPagePath}\n          nextLabel=\"Older posts\"\n        />\n      </Layout>\n    </>\n  )\n}\n\nTags.propTypes = {\n  data: PropTypes.object.isRequired,\n  pageContext: PropTypes.shape({\n    nextPagePath: PropTypes.string,\n    previousPagePath: PropTypes.string,\n  }),\n}\n\nexport const postsQuery = graphql`\n  query($limit: Int!, $skip: Int!, $tag: String!) {\n    allMarkdownRemark(\n      filter: { frontmatter: { tags: { in: [$tag] } } }\n      sort: { fields: [frontmatter___date], order: DESC }\n      limit: $limit\n      skip: $skip\n    ) {\n      edges {\n        node {\n          id\n          excerpt\n          frontmatter {\n            title\n            date(formatString: \"DD MMMM YYYY\")\n            path\n            author\n            excerpt\n            tags\n            location\n            type\n            coverImage {\n              childImageSharp {\n                fluid(maxWidth: 800) {\n                  ...GatsbyImageSharpFluid\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n`\n\nexport default Tags\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"post\":\"postcard-module--post--fo2iF\",\"title\":\"postcard-module--title--3rcpv\",\"coverImage\":\"postcard-module--coverImage--GBJQw\",\"meta\":\"postcard-module--meta--29pJ_\",\"tags\":\"postcard-module--tags--ZmVz3\",\"tag\":\"postcard-module--tag--1w-lA\",\"postContent\":\"postcard-module--postContent--17bBt\"};"],"sourceRoot":""}