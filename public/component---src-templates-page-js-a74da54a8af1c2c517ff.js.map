{"version":3,"sources":["webpack:///./src/styles/post.module.css","webpack:///./src/components/post.js","webpack:///./src/templates/page.js"],"names":["module","exports","Post","title","path","date","coverImage","excerpt","html","tags","location","type","previousPost","nextPost","previousPath","frontmatter","previousLabel","nextPath","nextLabel","className","style","post","postContent","to","meta","toKebabCase","toLowerCase","key","tag","fluid","childImageSharp","readMore","dangerouslySetInnerHTML","__html","pageQuery","BlogPostTemplate","data","pageContext","markdownRemark","author","autoExcerpt","id","next","previous","description"],"mappings":"gFACAA,EAAOC,QAAU,CAAC,KAAO,2BAA2B,MAAQ,4BAA4B,WAAa,iCAAiC,KAAO,2BAA2B,KAAO,2BAA2B,IAAM,0BAA0B,SAAW,+BAA+B,YAAc,oC,kNCgGnRC,EAxFF,SAAC,GAYP,IAXLC,EAWI,EAXJA,MAEAC,GASI,EAVJC,KAUI,EATJD,MACAE,EAQI,EARJA,WACAC,EAOI,EAPJA,QAEAC,GAKI,EANJC,KAMI,EALJD,MACAE,EAII,EAJJA,SACAC,EAGI,EAHJA,KACAC,EAEI,EAFJA,aACAC,EACI,EADJA,SAEMC,EAAeF,GAAgBA,EAAaG,YAAYX,KACxDY,EAAgBJ,GAAgBA,EAAaG,YAAYZ,MACzDc,EAAWJ,GAAYA,EAASE,YAAYX,KAC5Cc,EAAYL,GAAYA,EAASE,YAAYZ,MAEnD,OACE,yBAAKgB,UAAWC,IAAMC,MACpB,yBAAKF,UAAWC,IAAME,aAEpB,wBAAIH,UAAWC,IAAMjB,OAClBI,EAAU,kBAAC,OAAD,CAAMgB,GAAInB,GAAOD,GAAgBA,GAG9C,yBAAKgB,UAAWC,IAAMI,MACnBd,EACG,yBAAKS,UAAWC,IAAMX,MAClB,kBAAC,OAAD,CAAMc,GAAE,UAAYE,sBAAYf,GAAUgB,cAAlC,IAAoDC,IAAKF,sBAAYf,IACzE,0BAAMS,UAAWC,IAAMQ,KAAMlB,KAGrC,KAEHC,EACG,yBAAKQ,UAAWC,IAAMX,MAClB,kBAAC,OAAD,CAAMc,GAAE,SAAWE,sBAAYd,GAAMe,cAA7B,IAA+CC,IAAKF,sBAAYd,IACpE,0BAAMQ,UAAWC,IAAMQ,KAAMjB,KAGrC,MAGLL,GACC,kBAAC,IAAD,CACEuB,MAAOvB,EAAWwB,gBAAgBD,MAClCV,UAAWC,IAAMd,aAIpBC,EACC,oCACE,2BAAIA,GACJ,kBAAC,OAAD,CAAMgB,GAAInB,EAAMe,UAAWC,IAAMW,UAAjC,gBAKF,oCACE,yBAAKC,wBAAyB,CAAEC,OAAQzB,KACxC,kBAAC,IAAD,CACEM,aAAcA,EACdE,cAAeA,EACfC,SAAUA,EACVC,UAAWA,QC1BZgB,GAVEC,UA9BU,SAAC,GAA2B,IAAzBC,EAAwB,EAAxBA,KAAMC,EAAkB,EAAlBA,YAAkB,EAM9CD,EAAKE,eANyC,IAEhDvB,YAAeZ,EAFiC,EAEjCA,MAAOE,EAF0B,EAE1BA,KAAMD,EAFoB,EAEpBA,KAAMmC,EAFc,EAEdA,OAAQjC,EAFM,EAENA,WAAYC,EAFN,EAEMA,QAASE,EAFf,EAEeA,KAAMC,EAFrB,EAEqBA,SAAUC,EAF/B,EAE+BA,KACtE6B,EAHuC,EAGhDjC,QACAkC,EAJgD,EAIhDA,GACAjC,EALgD,EAKhDA,KAEMkC,EAAmBL,EAAnBK,KAAMC,EAAaN,EAAbM,SAEd,OACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAKxC,MAAOA,EAAOyC,YAAarC,GAAWiC,IAC3C,kBAAC,EAAD,CACEb,IAAKc,EACLtC,MAAOA,EACPE,KAAMA,EACND,KAAMA,EACNmC,OAAQA,EACRjC,WAAYA,EACZE,KAAMA,EACNC,KAAMA,EACNC,SAAUA,EACVC,KAAMA,EACNC,aAAc+B,EACd9B,SAAU6B,MAgBI","file":"component---src-templates-page-js-a74da54a8af1c2c517ff.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"post\":\"post-module--post--28Mq2\",\"title\":\"post-module--title--3XBo2\",\"coverImage\":\"post-module--coverImage--1GM7V\",\"meta\":\"post-module--meta--3YtjE\",\"tags\":\"post-module--tags--3RbqF\",\"tag\":\"post-module--tag--16U9p\",\"readMore\":\"post-module--readMore--3zWML\",\"postContent\":\"post-module--postContent--1bfnt\"};","import React from 'react'\nimport PropTypes from 'prop-types'\nimport { Link } from 'gatsby'\nimport Img from 'gatsby-image'\nimport Navigation from './navigation'\nimport { toKebabCase } from '../helpers'\n\nimport style from '../styles/post.module.css'\n\nconst Post = ({\n  title,\n  date,\n  path,\n  coverImage,\n  excerpt,\n  tags,\n  html,\n  location,\n  type,\n  previousPost,\n  nextPost,\n}) => {\n  const previousPath = previousPost && previousPost.frontmatter.path\n  const previousLabel = previousPost && previousPost.frontmatter.title\n  const nextPath = nextPost && nextPost.frontmatter.path\n  const nextLabel = nextPost && nextPost.frontmatter.title\n\n  return (\n    <div className={style.post}>\n      <div className={style.postContent}>\n        \n        <h1 className={style.title}>\n          {excerpt ? <Link to={path}>{title}</Link> : title}\n        </h1>\n\n        <div className={style.meta}>\n          {location ? (\n              <div className={style.tags}>\n                  <Link to={`/place/${toKebabCase(location).toLowerCase()}/`} key={toKebabCase(location)}>\n                      <span className={style.tag}>{location}</span>\n                  </Link>\n              </div>\n          ) : null}\n\n          {type ? (\n              <div className={style.tags}>\n                  <Link to={`/type/${toKebabCase(type).toLowerCase()}/`} key={toKebabCase(type)}>\n                      <span className={style.tag}>{type}</span>\n                  </Link>\n              </div>\n          ) : null}\n        </div>\n\n        {coverImage && (\n          <Img\n            fluid={coverImage.childImageSharp.fluid}\n            className={style.coverImage}\n          />\n        )}\n\n        {excerpt ? (\n          <>\n            <p>{excerpt}</p>\n            <Link to={path} className={style.readMore}>\n              Read more â†’\n            </Link>\n          </>\n        ) : (\n          <>\n            <div dangerouslySetInnerHTML={{ __html: html }} />\n            <Navigation\n              previousPath={previousPath}\n              previousLabel={previousLabel}\n              nextPath={nextPath}\n              nextLabel={nextLabel}\n            />\n          </>\n        )}\n      </div>\n    </div>\n  )\n}\n\nPost.propTypes = {\n  title: PropTypes.string,\n  date: PropTypes.string,\n  path: PropTypes.string,\n  coverImage: PropTypes.object,\n  excerpt: PropTypes.string,\n  html: PropTypes.string,\n  tags: PropTypes.arrayOf(PropTypes.string),\n  location: PropTypes.string,\n  type: PropTypes.string,\n  previousPost: PropTypes.object,\n  nextPost: PropTypes.object,\n}\n\nexport default Post\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport { graphql } from 'gatsby'\n\nimport SEO from '../components/seo'\nimport Layout from '../components/layout'\nimport Post from '../components/post'\n\nconst BlogPostTemplate = ({ data, pageContext }) => {\n  const {\n    frontmatter: { title, date, path, author, coverImage, excerpt, tags, location, type },\n    excerpt: autoExcerpt,\n    id,\n    html,\n  } = data.markdownRemark\n  const { next, previous } = pageContext\n\n  return (\n    <Layout>\n      <SEO title={title} description={excerpt || autoExcerpt} />\n      <Post\n        key={id}\n        title={title}\n        date={date}\n        path={path}\n        author={author}\n        coverImage={coverImage}\n        html={html}\n        tags={tags}\n        location={location}\n        type={type}\n        previousPost={previous}\n        nextPost={next}\n      />\n    </Layout>\n  )\n}\n\nexport default BlogPostTemplate\n\nBlogPostTemplate.propTypes = {\n  data: PropTypes.object.isRequired,\n  pageContext: PropTypes.shape({\n    next: PropTypes.object,\n    previous: PropTypes.object,\n  }),\n}\n\nexport const pageQuery = graphql`\n  query($path: String) {\n    markdownRemark(frontmatter: { path: { eq: $path } }) {\n      frontmatter {\n        title\n        date(formatString: \"DD MMMM YYYY\")\n        path\n        author\n        excerpt\n        tags\n        location\n        type\n        coverImage {\n          childImageSharp {\n            fluid(maxWidth: 800) {\n              ...GatsbyImageSharpFluid\n            }\n          }\n        }\n      }\n      id\n      html\n      excerpt\n    }\n  }\n`\n"],"sourceRoot":""}