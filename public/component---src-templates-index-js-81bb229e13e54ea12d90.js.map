{"version":3,"sources":["webpack:///./src/components/postcard.js","webpack:///./src/templates/index.js","webpack:///./src/styles/postcard.module.css"],"names":["title","path","coverImage","location","type","date","className","style","post","postContent","to","fluid","childImageSharp","meta","tags","toKebabCase","toLowerCase","key","tag","Index","data","pageContext","nextPagePath","previousPagePath","posts","allMarkdownRemark","edges","map","node","id","autoExcerpt","excerpt","frontmatter","previousPath","previousLabel","nextPath","nextLabel","module","exports"],"mappings":"6FAAA,2FAOe,gBAON,IANLA,EAMI,EANJA,MACAC,EAKI,EALJA,KACAC,EAII,EAJJA,WACAC,EAGI,EAHJA,SACAC,EAEI,EAFJA,KAEI,EADJC,KAGA,OACI,yBAAKC,UAAWC,IAAMC,MACtB,yBAAKF,UAAWC,IAAME,aACtB,yBAAKH,UAAU,YAEX,wBAAIA,UAAWC,IAAMP,OACjB,kBAAC,OAAD,CAAMU,GAAIT,GAAOD,IAGpBE,GACG,kBAAC,IAAD,CACIS,MAAOT,EAAWU,gBAAgBD,MAClCL,UAAWC,IAAML,aAIzB,yBAAKI,UAAWC,IAAMM,MACjBV,EACG,yBAAKG,UAAWC,IAAMO,MAClB,kBAAC,OAAD,CAAMJ,GAAE,UAAYK,sBAAYZ,GAAUa,cAAlC,IAAoDC,IAAKF,sBAAYZ,IACzE,0BAAMG,UAAWC,IAAMW,KAAMf,KAGrC,KAEHC,EACG,yBAAKE,UAAWC,IAAMO,MAClB,kBAAC,OAAD,CAAMJ,GAAE,SAAWK,sBAAYX,GAAMY,cAA7B,IAA+CC,IAAKF,sBAAYX,IACpE,0BAAME,UAAWC,IAAMW,KAAMd,KAGrC,W,kCC/CpB,0FA8Iee,UAnID,SAAC,GAA+D,IAA7DC,EAA4D,EAA5DA,KAA4D,IAAtDC,YAAeC,EAAuC,EAAvCA,aAAcC,EAAyB,EAAzBA,iBAEpBC,EAC1BJ,EADFK,kBAAqBC,MAqCvB,OACE,oCACE,kBAAC,IAAD,MACA,kBAAC,IAAD,KAEE,yBAAKpB,UAAU,mBACdkB,EAAMG,KAAI,YAAe,IAAZC,EAAW,EAAXA,KAEZC,EAYED,EAZFC,GACSC,EAWPF,EAXFG,QAHuB,EAcrBH,EAVFI,YACEhC,EALqB,EAKrBA,MACAK,EANqB,EAMrBA,KACAJ,EAPqB,EAOrBA,KACAC,EARqB,EAQrBA,WACA6B,EATqB,EASrBA,QACAjB,EAVqB,EAUrBA,KACAX,EAXqB,EAWrBA,SACAC,EAZqB,EAYrBA,KAIJ,OACE,kBAAC,IAAD,CACEa,IAAKY,EACL7B,MAAOA,EACPK,KAAMA,EACNJ,KAAMA,EACNC,WAAYA,EACZY,KAAMA,EACNX,SAAUA,EACVC,KAAMA,EACN2B,QAASA,GAAWD,OAKxB,kBAAC,IAAD,CACEG,aAAcV,EACdW,cAAc,cACdC,SAAUb,EACVc,UAAU,qB,qBC1FpBC,EAAOC,QAAU,CAAC,KAAO,+BAA+B,MAAQ,gCAAgC,WAAa,qCAAqC,KAAO,+BAA+B,KAAO,+BAA+B,IAAM,8BAA8B,YAAc","file":"component---src-templates-index-js-81bb229e13e54ea12d90.js","sourcesContent":["import React from 'react'\r\nimport { Link } from 'gatsby'\r\nimport Img from 'gatsby-image'\r\nimport { toKebabCase } from '../helpers'\r\n\r\nimport style from '../styles/postcard.module.css'\r\n\r\nexport default ({\r\n    title,\r\n    path,\r\n    coverImage,\r\n    location,\r\n    type,\r\n    date,\r\n  }) => {\r\n\r\n    return (\r\n        <div className={style.post}>\r\n        <div className={style.postContent}>\r\n        <div className=\"postcard\">\r\n\r\n            <h1 className={style.title}>\r\n                <Link to={path}>{title}</Link>\r\n            </h1>\r\n\r\n            {coverImage && (\r\n                <Img\r\n                    fluid={coverImage.childImageSharp.fluid}\r\n                    className={style.coverImage}\r\n                />\r\n            )}\r\n\r\n            <div className={style.meta}>\r\n                {location ? (\r\n                    <div className={style.tags}>\r\n                        <Link to={`/place/${toKebabCase(location).toLowerCase()}/`} key={toKebabCase(location)}>\r\n                            <span className={style.tag}>{location}</span>\r\n                        </Link>\r\n                    </div>\r\n                ) : null}\r\n\r\n                {type ? (\r\n                    <div className={style.tags}>\r\n                        <Link to={`/type/${toKebabCase(type).toLowerCase()}/`} key={toKebabCase(type)}>\r\n                            <span className={style.tag}>{type}</span>\r\n                        </Link>\r\n                    </div>\r\n                ) : null}\r\n            </div>\r\n\r\n        </div>\r\n        </div>\r\n        </div>\r\n    )\r\n}","import React from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport { graphql } from 'gatsby'\r\n\r\nimport SEO from '../components/seo'\r\nimport Layout from '../components/layout'\r\nimport Postcard from '../components/postcard'\r\nimport Navigation from '../components/navigation'\r\n\r\nimport '../styles/layout.css'\r\n\r\nconst Index = ({ data, pageContext: { nextPagePath, previousPagePath } }) => {\r\n  const {\r\n    allMarkdownRemark: { edges: posts },\r\n  } = data\r\n\r\n  // let isMouseHover = false\r\n  // const test = document.getElementById(\"scroll\")\r\n\r\n  // useEffect(()=>{\r\n  //   test.addEventListener(\"mouseleave\", function (event) {\r\n  //     isMouseHover = false\r\n  //     // event.target.textContent = \"mouse out\"\r\n  //     console.log(isMouseHover)\r\n  //   }, false)\r\n  //   test.addEventListener(\"mouseover\", function (event) {\r\n  //     isMouseHover = true\r\n  //     // event.target.textContent = \"mouse in\"\r\n  //     console.log(isMouseHover)\r\n  //   }, false)\r\n  //   document.addEventListener('wheel', horizontalScroll, {passive: false})\r\n  //   document.addEventListener('mousewheel', horizontalScroll, {passive: false})\r\n  //   if(!isMouseHover) {\r\n  //     document.removeEventListener('wheel', horizontalScroll, {passive: false})\r\n  //     document.removeEventListener('mousewheel', horizontalScroll, {passive: false})\r\n  //   }\r\n  // })\r\n\r\n  // const horizontalScroll = e => {\r\n  //   if(isMouseHover) {\r\n  //     e.preventDefault()\r\n  //     var container = document.getElementById('scroll')\r\n  //     var containerScrollPosition = document.getElementById('scroll').scrollLeft\r\n  //     container.scrollTo({\r\n  //         top: 0,\r\n  //         left: containerScrollPosition + e.deltaY\r\n  //     })\r\n  //   }\r\n  // }\r\n\r\n  return (\r\n    <>\r\n      <SEO />\r\n      <Layout>\r\n\r\n        <div className=\"index-container\">\r\n        {posts.map(({ node }) => {\r\n        const {\r\n          id,\r\n          excerpt: autoExcerpt,\r\n          frontmatter: {\r\n            title,\r\n            date,\r\n            path,\r\n            coverImage,\r\n            excerpt,\r\n            tags,\r\n            location,\r\n            type,\r\n          },\r\n        } = node\r\n\r\n        return (\r\n          <Postcard\r\n            key={id}\r\n            title={title}\r\n            date={date}\r\n            path={path}\r\n            coverImage={coverImage}\r\n            tags={tags}\r\n            location={location}\r\n            type={type}\r\n            excerpt={excerpt || autoExcerpt}\r\n          />\r\n        )\r\n        })}\r\n\r\n        <Navigation\r\n          previousPath={previousPagePath}\r\n          previousLabel=\"Newer posts\"\r\n          nextPath={nextPagePath}\r\n          nextLabel=\"Older posts\"\r\n        />\r\n        </div>\r\n\r\n      </Layout>\r\n    </>\r\n  )\r\n}\r\n\r\nIndex.propTypes = {\r\n  data: PropTypes.object.isRequired,\r\n  pageContext: PropTypes.shape({\r\n    nextPagePath: PropTypes.string,\r\n    previousPagePath: PropTypes.string,\r\n  }),\r\n}\r\n\r\nexport const postsQuery = graphql`\r\n  query($limit: Int!, $skip: Int!) {\r\n    allMarkdownRemark(\r\n      filter: { fileAbsolutePath: { regex: \"//posts//\" }, frontmatter: { published: { eq: true } } }\r\n      sort: { fields: [frontmatter___date], order: DESC }\r\n      limit: $limit\r\n      skip: $skip\r\n    ) {\r\n      edges {\r\n        node {\r\n          id\r\n          excerpt\r\n          frontmatter {\r\n            title\r\n            date(formatString: \"DD MMMM YYYY\")\r\n            path\r\n            excerpt\r\n            tags\r\n            location\r\n            type\r\n            coverImage {\r\n              childImageSharp {\r\n                fluid(maxWidth: 800) {\r\n                  ...GatsbyImageSharpFluid\r\n                }\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n`\r\n\r\nexport default Index\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"post\":\"postcard-module--post--3FEZO\",\"title\":\"postcard-module--title--1LAa6\",\"coverImage\":\"postcard-module--coverImage--2rjC-\",\"meta\":\"postcard-module--meta--1kz8p\",\"tags\":\"postcard-module--tags--3dOjA\",\"tag\":\"postcard-module--tag--XIthI\",\"postContent\":\"postcard-module--postContent--1Ul_j\"};"],"sourceRoot":""}