{"version":3,"sources":["webpack:///./src/components/postcard.js","webpack:///./src/templates/index.js","webpack:///./src/styles/postcard.module.css"],"names":["title","path","coverImage","location","type","date","className","style","post","postContent","to","fluid","childImageSharp","meta","tags","toKebabCase","toLowerCase","key","tag","postsQuery","Index","data","pageContext","nextPagePath","previousPagePath","posts","allMarkdownRemark","edges","map","node","id","autoExcerpt","excerpt","frontmatter","previousPath","previousLabel","nextPath","nextLabel","module","exports"],"mappings":"6FAAA,2FAOe,gBAON,IANLA,EAMI,EANJA,MACAC,EAKI,EALJA,KACAC,EAII,EAJJA,WACAC,EAGI,EAHJA,SACAC,EAEI,EAFJA,KAEI,EADJC,KAGA,OACI,yBAAKC,UAAWC,IAAMC,MACtB,yBAAKF,UAAWC,IAAME,aACtB,yBAAKH,UAAU,YAEX,wBAAIA,UAAWC,IAAMP,OACjB,kBAAC,OAAD,CAAMU,GAAIT,GAAOD,IAGpBE,GACG,kBAAC,IAAD,CACIS,MAAOT,EAAWU,gBAAgBD,MAClCL,UAAWC,IAAML,aAIzB,yBAAKI,UAAWC,IAAMM,MACjBV,EACG,yBAAKG,UAAWC,IAAMO,MAClB,kBAAC,OAAD,CAAMJ,GAAE,UAAYK,sBAAYZ,GAAUa,cAAlC,IAAoDC,IAAKF,sBAAYZ,IACzE,0BAAMG,UAAWC,IAAMW,KAAMf,KAGrC,KAEHC,EACG,yBAAKE,UAAWC,IAAMO,MAClB,kBAAC,OAAD,CAAMJ,GAAE,SAAWK,sBAAYX,GAAMY,cAA7B,IAA+CC,IAAKF,sBAAYX,IACpE,0BAAME,UAAWC,IAAMW,KAAMd,KAGrC,W,kCC/CpB,2HA4Gae,GA5Gb,UA4GuB,cAkCRC,UAnID,SAAC,GAA+D,IAA7DC,EAA4D,EAA5DA,KAA4D,IAAtDC,YAAeC,EAAuC,EAAvCA,aAAcC,EAAyB,EAAzBA,iBAEpBC,EAC1BJ,EADFK,kBAAqBC,MAqCvB,OACE,oCACE,kBAAC,IAAD,MACA,kBAAC,IAAD,KAEE,yBAAKrB,UAAU,mBACdmB,EAAMG,KAAI,YAAe,IAAZC,EAAW,EAAXA,KAEZC,EAYED,EAZFC,GACSC,EAWPF,EAXFG,QAHuB,EAcrBH,EAVFI,YACEjC,EALqB,EAKrBA,MACAK,EANqB,EAMrBA,KACAJ,EAPqB,EAOrBA,KACAC,EARqB,EAQrBA,WACA8B,EATqB,EASrBA,QACAlB,EAVqB,EAUrBA,KACAX,EAXqB,EAWrBA,SACAC,EAZqB,EAYrBA,KAIJ,OACE,kBAAC,IAAD,CACEa,IAAKa,EACL9B,MAAOA,EACPK,KAAMA,EACNJ,KAAMA,EACNC,WAAYA,EACZY,KAAMA,EACNX,SAAUA,EACVC,KAAMA,EACN4B,QAASA,GAAWD,OAKxB,kBAAC,IAAD,CACEG,aAAcV,EACdW,cAAc,cACdC,SAAUb,EACVc,UAAU,qB,qBC1FpBC,EAAOC,QAAU,CAAC,KAAO,+BAA+B,MAAQ,gCAAgC,WAAa,qCAAqC,KAAO,+BAA+B,KAAO,+BAA+B,IAAM,8BAA8B,YAAc","file":"component---src-templates-index-js-5028a655e280fbc963fc.js","sourcesContent":["import React from 'react'\nimport { Link } from 'gatsby'\nimport Img from 'gatsby-image'\nimport { toKebabCase } from '../helpers'\n\nimport style from '../styles/postcard.module.css'\n\nexport default ({\n    title,\n    path,\n    coverImage,\n    location,\n    type,\n    date,\n  }) => {\n\n    return (\n        <div className={style.post}>\n        <div className={style.postContent}>\n        <div className=\"postcard\">\n\n            <h1 className={style.title}>\n                <Link to={path}>{title}</Link>\n            </h1>\n\n            {coverImage && (\n                <Img\n                    fluid={coverImage.childImageSharp.fluid}\n                    className={style.coverImage}\n                />\n            )}\n\n            <div className={style.meta}>\n                {location ? (\n                    <div className={style.tags}>\n                        <Link to={`/place/${toKebabCase(location).toLowerCase()}/`} key={toKebabCase(location)}>\n                            <span className={style.tag}>{location}</span>\n                        </Link>\n                    </div>\n                ) : null}\n\n                {type ? (\n                    <div className={style.tags}>\n                        <Link to={`/type/${toKebabCase(type).toLowerCase()}/`} key={toKebabCase(type)}>\n                            <span className={style.tag}>{type}</span>\n                        </Link>\n                    </div>\n                ) : null}\n            </div>\n\n        </div>\n        </div>\n        </div>\n    )\n}","import React from 'react'\nimport PropTypes from 'prop-types'\nimport { graphql } from 'gatsby'\n\nimport SEO from '../components/seo'\nimport Layout from '../components/layout'\nimport Postcard from '../components/postcard'\nimport Navigation from '../components/navigation'\n\nimport '../styles/layout.css'\n\nconst Index = ({ data, pageContext: { nextPagePath, previousPagePath } }) => {\n  const {\n    allMarkdownRemark: { edges: posts },\n  } = data\n\n  // let isMouseHover = false\n  // const test = document.getElementById(\"scroll\")\n\n  // useEffect(()=>{\n  //   test.addEventListener(\"mouseleave\", function (event) {\n  //     isMouseHover = false\n  //     // event.target.textContent = \"mouse out\"\n  //     console.log(isMouseHover)\n  //   }, false)\n  //   test.addEventListener(\"mouseover\", function (event) {\n  //     isMouseHover = true\n  //     // event.target.textContent = \"mouse in\"\n  //     console.log(isMouseHover)\n  //   }, false)\n  //   document.addEventListener('wheel', horizontalScroll, {passive: false})\n  //   document.addEventListener('mousewheel', horizontalScroll, {passive: false})\n  //   if(!isMouseHover) {\n  //     document.removeEventListener('wheel', horizontalScroll, {passive: false})\n  //     document.removeEventListener('mousewheel', horizontalScroll, {passive: false})\n  //   }\n  // })\n\n  // const horizontalScroll = e => {\n  //   if(isMouseHover) {\n  //     e.preventDefault()\n  //     var container = document.getElementById('scroll')\n  //     var containerScrollPosition = document.getElementById('scroll').scrollLeft\n  //     container.scrollTo({\n  //         top: 0,\n  //         left: containerScrollPosition + e.deltaY\n  //     })\n  //   }\n  // }\n\n  return (\n    <>\n      <SEO />\n      <Layout>\n\n        <div className=\"index-container\">\n        {posts.map(({ node }) => {\n        const {\n          id,\n          excerpt: autoExcerpt,\n          frontmatter: {\n            title,\n            date,\n            path,\n            coverImage,\n            excerpt,\n            tags,\n            location,\n            type,\n          },\n        } = node\n\n        return (\n          <Postcard\n            key={id}\n            title={title}\n            date={date}\n            path={path}\n            coverImage={coverImage}\n            tags={tags}\n            location={location}\n            type={type}\n            excerpt={excerpt || autoExcerpt}\n          />\n        )\n        })}\n\n        <Navigation\n          previousPath={previousPagePath}\n          previousLabel=\"Newer posts\"\n          nextPath={nextPagePath}\n          nextLabel=\"Older posts\"\n        />\n        </div>\n\n      </Layout>\n    </>\n  )\n}\n\nIndex.propTypes = {\n  data: PropTypes.object.isRequired,\n  pageContext: PropTypes.shape({\n    nextPagePath: PropTypes.string,\n    previousPagePath: PropTypes.string,\n  }),\n}\n\nexport const postsQuery = graphql`\n  query($limit: Int!, $skip: Int!) {\n    allMarkdownRemark(\n      filter: { fileAbsolutePath: { regex: \"//posts//\" }, frontmatter: { published: { eq: true } } }\n      sort: { fields: [frontmatter___date], order: DESC }\n      limit: $limit\n      skip: $skip\n    ) {\n      edges {\n        node {\n          id\n          excerpt\n          frontmatter {\n            title\n            date(formatString: \"DD MMMM YYYY\")\n            path\n            excerpt\n            tags\n            location\n            type\n            coverImage {\n              childImageSharp {\n                fluid(maxWidth: 800) {\n                  ...GatsbyImageSharpFluid\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n`\n\nexport default Index\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"post\":\"postcard-module--post--fo2iF\",\"title\":\"postcard-module--title--3rcpv\",\"coverImage\":\"postcard-module--coverImage--GBJQw\",\"meta\":\"postcard-module--meta--29pJ_\",\"tags\":\"postcard-module--tags--ZmVz3\",\"tag\":\"postcard-module--tag--1w-lA\",\"postContent\":\"postcard-module--postContent--17bBt\"};"],"sourceRoot":""}