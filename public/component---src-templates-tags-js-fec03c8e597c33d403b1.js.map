{"version":3,"sources":["webpack:///./src/components/postcard.js","webpack:///./src/templates/tags.js","webpack:///./src/styles/postcard.module.css"],"names":["title","path","coverImage","location","type","date","className","style","post","postContent","to","fluid","childImageSharp","meta","tags","toKebabCase","toLowerCase","key","tag","Tags","data","pageContext","nextPagePath","previousPagePath","posts","allMarkdownRemark","edges","map","node","id","autoExcerpt","excerpt","frontmatter","author","previousPath","previousLabel","nextPath","nextLabel","module","exports"],"mappings":"8FAAA,2FAOe,gBAON,IANLA,EAMI,EANJA,MACAC,EAKI,EALJA,KACAC,EAII,EAJJA,WACAC,EAGI,EAHJA,SACAC,EAEI,EAFJA,KAEI,EADJC,KAGA,OACI,yBAAKC,UAAWC,IAAMC,MACtB,yBAAKF,UAAWC,IAAME,aACtB,yBAAKH,UAAU,YAEX,wBAAIA,UAAWC,IAAMP,OACjB,kBAAC,OAAD,CAAMU,GAAIT,GAAOD,IAGpBE,GACG,kBAAC,IAAD,CACIS,MAAOT,EAAWU,gBAAgBD,MAClCL,UAAWC,IAAML,aAIzB,yBAAKI,UAAWC,IAAMM,MACjBV,EACG,yBAAKG,UAAWC,IAAMO,MAClB,kBAAC,OAAD,CAAMJ,GAAE,UAAYK,sBAAYZ,GAAUa,cAAlC,IAAoDC,IAAKF,sBAAYZ,IACzE,0BAAMG,UAAWC,IAAMW,KAAMf,KAGrC,KAEHC,EACG,yBAAKE,UAAWC,IAAMO,MAClB,kBAAC,OAAD,CAAMJ,GAAE,SAAWK,sBAAYX,GAAMY,cAA7B,IAA+CC,IAAKF,sBAAYX,IACpE,0BAAME,UAAWC,IAAMW,KAAMd,KAGrC,W,kCC/CpB,0FAiHee,UAvGF,SAAC,GAGP,IAFLC,EAEI,EAFJA,KAEI,IADJC,YAAeC,EACX,EADWA,aAAcC,EACzB,EADyBA,iBAAkBL,EAC3C,EAD2CA,IAGjBM,EAC1BJ,EADFK,kBAAqBC,MAGvB,OACE,oCACE,kBAAC,IAAD,MACA,kBAAC,IAAD,KACE,yBAAKpB,UAAU,cAAf,mBACkB,kCAAQY,IAGzBM,EAAMG,KAAI,YAAe,IAAZC,EAAW,EAAXA,KAEVC,EAaED,EAbFC,GACSC,EAYPF,EAZFG,QAHqB,EAenBH,EAXFI,YACEhC,EALmB,EAKnBA,MACAK,EANmB,EAMnBA,KACAJ,EAPmB,EAOnBA,KACAgC,EARmB,EAQnBA,OACA/B,EATmB,EASnBA,WACA6B,EAVmB,EAUnBA,QACAjB,EAXmB,EAWnBA,KACAX,EAZmB,EAYnBA,SACAC,EAbmB,EAanBA,KAIJ,OACE,kBAAC,IAAD,CACEa,IAAKY,EACL7B,MAAOA,EACPK,KAAMA,EACNJ,KAAMA,EACNgC,OAAQA,EACRnB,KAAMA,EACNX,SAAUA,EACVC,KAAMA,EACNF,WAAYA,EACZ6B,QAASA,GAAWD,OAK1B,kBAAC,IAAD,CACEI,aAAcX,EACdY,cAAc,cACdC,SAAUd,EACVe,UAAU,oB,qBC9DpBC,EAAOC,QAAU,CAAC,KAAO,+BAA+B,MAAQ,gCAAgC,WAAa,qCAAqC,KAAO,+BAA+B,KAAO,+BAA+B,IAAM,8BAA8B,YAAc","file":"component---src-templates-tags-js-fec03c8e597c33d403b1.js","sourcesContent":["import React from 'react'\r\nimport { Link } from 'gatsby'\r\nimport Img from 'gatsby-image'\r\nimport { toKebabCase } from '../helpers'\r\n\r\nimport style from '../styles/postcard.module.css'\r\n\r\nexport default ({\r\n    title,\r\n    path,\r\n    coverImage,\r\n    location,\r\n    type,\r\n    date,\r\n  }) => {\r\n\r\n    return (\r\n        <div className={style.post}>\r\n        <div className={style.postContent}>\r\n        <div className=\"postcard\">\r\n\r\n            <h1 className={style.title}>\r\n                <Link to={path}>{title}</Link>\r\n            </h1>\r\n\r\n            {coverImage && (\r\n                <Img\r\n                    fluid={coverImage.childImageSharp.fluid}\r\n                    className={style.coverImage}\r\n                />\r\n            )}\r\n\r\n            <div className={style.meta}>\r\n                {location ? (\r\n                    <div className={style.tags}>\r\n                        <Link to={`/place/${toKebabCase(location).toLowerCase()}/`} key={toKebabCase(location)}>\r\n                            <span className={style.tag}>{location}</span>\r\n                        </Link>\r\n                    </div>\r\n                ) : null}\r\n\r\n                {type ? (\r\n                    <div className={style.tags}>\r\n                        <Link to={`/type/${toKebabCase(type).toLowerCase()}/`} key={toKebabCase(type)}>\r\n                            <span className={style.tag}>{type}</span>\r\n                        </Link>\r\n                    </div>\r\n                ) : null}\r\n            </div>\r\n\r\n        </div>\r\n        </div>\r\n        </div>\r\n    )\r\n}","import React from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport { graphql } from 'gatsby'\r\nimport SEO from '../components/seo'\r\nimport Layout from '../components/layout'\r\nimport Postcard from '../components/postcard'\r\nimport Navigation from '../components/navigation'\r\n\r\nimport '../styles/layout.css'\r\n\r\nconst Tags = ({\r\n  data,\r\n  pageContext: { nextPagePath, previousPagePath, tag },\r\n}) => {\r\n  const {\r\n    allMarkdownRemark: { edges: posts },\r\n  } = data\r\n\r\n  return (\r\n    <>\r\n      <SEO />\r\n      <Layout>\r\n        <div className=\"infoBanner\">\r\n          Posts with tag: <span>#{tag}</span>\r\n        </div>\r\n\r\n        {posts.map(({ node }) => {\r\n          const {\r\n            id,\r\n            excerpt: autoExcerpt,\r\n            frontmatter: {\r\n              title,\r\n              date,\r\n              path,\r\n              author,\r\n              coverImage,\r\n              excerpt,\r\n              tags,\r\n              location,\r\n              type,\r\n            },\r\n          } = node\r\n\r\n          return (\r\n            <Postcard\r\n              key={id}\r\n              title={title}\r\n              date={date}\r\n              path={path}\r\n              author={author}\r\n              tags={tags}\r\n              location={location}\r\n              type={type}\r\n              coverImage={coverImage}\r\n              excerpt={excerpt || autoExcerpt}\r\n            />\r\n          )\r\n        })}\r\n\r\n        <Navigation\r\n          previousPath={previousPagePath}\r\n          previousLabel=\"Newer posts\"\r\n          nextPath={nextPagePath}\r\n          nextLabel=\"Older posts\"\r\n        />\r\n      </Layout>\r\n    </>\r\n  )\r\n}\r\n\r\nTags.propTypes = {\r\n  data: PropTypes.object.isRequired,\r\n  pageContext: PropTypes.shape({\r\n    nextPagePath: PropTypes.string,\r\n    previousPagePath: PropTypes.string,\r\n  }),\r\n}\r\n\r\nexport const postsQuery = graphql`\r\n  query($limit: Int!, $skip: Int!, $tag: String!) {\r\n    allMarkdownRemark(\r\n      filter: { frontmatter: { tags: { in: [$tag] } } }\r\n      sort: { fields: [frontmatter___date], order: DESC }\r\n      limit: $limit\r\n      skip: $skip\r\n    ) {\r\n      edges {\r\n        node {\r\n          id\r\n          excerpt\r\n          frontmatter {\r\n            title\r\n            date(formatString: \"DD MMMM YYYY\")\r\n            path\r\n            author\r\n            excerpt\r\n            tags\r\n            location\r\n            type\r\n            coverImage {\r\n              childImageSharp {\r\n                fluid(maxWidth: 800) {\r\n                  ...GatsbyImageSharpFluid\r\n                }\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n`\r\n\r\nexport default Tags\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"post\":\"postcard-module--post--3FEZO\",\"title\":\"postcard-module--title--1LAa6\",\"coverImage\":\"postcard-module--coverImage--2rjC-\",\"meta\":\"postcard-module--meta--1kz8p\",\"tags\":\"postcard-module--tags--3dOjA\",\"tag\":\"postcard-module--tag--XIthI\",\"postContent\":\"postcard-module--postContent--1Ul_j\"};"],"sourceRoot":""}