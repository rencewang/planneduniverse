{"version":3,"sources":["webpack:///./src/styles/post.module.css","webpack:///./src/components/post.js","webpack:///./src/templates/page.js"],"names":["module","exports","Post","title","path","date","excerpt","coverImage","html","tags","location","type","previousPost","nextPost","previousPath","frontmatter","previousLabel","nextPath","nextLabel","className","style","post","postContent","to","meta","toKebabCase","toLowerCase","key","tag","readMore","markdowncontent","dangerouslySetInnerHTML","__html","BlogPostTemplate","data","pageContext","markdownRemark","author","autoExcerpt","id","next","previous","description"],"mappings":"gFACAA,EAAOC,QAAU,CAAC,KAAO,2BAA2B,MAAQ,4BAA4B,WAAa,iCAAiC,KAAO,2BAA2B,KAAO,2BAA2B,IAAM,0BAA0B,SAAW,+BAA+B,YAAc,kCAAkC,gBAAkB,wC,+JCgGvUC,EAxFF,SAAC,GAYP,IAXLC,EAWI,EAXJA,MAEAC,GASI,EAVJC,KAUI,EATJD,MAEAE,GAOI,EARJC,WAQI,EAPJD,SAEAE,GAKI,EANJC,KAMI,EALJD,MACAE,EAII,EAJJA,SACAC,EAGI,EAHJA,KACAC,EAEI,EAFJA,aACAC,EACI,EADJA,SAEMC,EAAeF,GAAgBA,EAAaG,YAAYX,KACxDY,EAAgBJ,GAAgBA,EAAaG,YAAYZ,MACzDc,EAAWJ,GAAYA,EAASE,YAAYX,KAC5Cc,EAAYL,GAAYA,EAASE,YAAYZ,MAEnD,OACE,yBAAKgB,UAAWC,IAAMC,MACpB,yBAAKF,UAAWC,IAAME,aAEpB,wBAAIH,UAAWC,IAAMjB,OAClBG,EAAU,kBAAC,OAAD,CAAMiB,GAAInB,GAAOD,GAAgBA,GAG9C,yBAAKgB,UAAWC,IAAMI,MACnBd,EACG,yBAAKS,UAAWC,IAAMX,MAClB,kBAAC,OAAD,CAAMc,GAAE,UAAYE,sBAAYf,GAAUgB,cAAlC,IAAoDC,IAAKF,sBAAYf,IACzE,0BAAMS,UAAWC,IAAMQ,KAAMlB,KAGrC,KAEHC,EACG,yBAAKQ,UAAWC,IAAMX,MAClB,kBAAC,OAAD,CAAMc,GAAE,SAAWE,sBAAYd,GAAMe,cAA7B,IAA+CC,IAAKF,sBAAYd,IACpE,0BAAMQ,UAAWC,IAAMQ,KAAMjB,KAGrC,MAULL,EACC,oCACE,2BAAIA,GACJ,kBAAC,OAAD,CAAMiB,GAAInB,EAAMe,UAAWC,IAAMS,UAAjC,gBAKF,oCACE,yBAAKV,UAAWC,IAAMU,gBAAiBC,wBAAyB,CAAEC,OAAQxB,KAC1E,kBAAC,IAAD,CACEM,aAAcA,EACdE,cAAeA,EACfC,SAAUA,EACVC,UAAWA,QCpCVe,UA9BU,SAAC,GAA2B,IAAzBC,EAAwB,EAAxBA,KAAMC,EAAkB,EAAlBA,YAAkB,EAM9CD,EAAKE,eANyC,IAEhDrB,YAAeZ,EAFiC,EAEjCA,MAAOE,EAF0B,EAE1BA,KAAMD,EAFoB,EAEpBA,KAAMiC,EAFc,EAEdA,OAAQ9B,EAFM,EAENA,WAAYD,EAFN,EAEMA,QAASG,EAFf,EAEeA,KAAMC,EAFrB,EAEqBA,SAAUC,EAF/B,EAE+BA,KACtE2B,EAHuC,EAGhDhC,QACAiC,EAJgD,EAIhDA,GACA/B,EALgD,EAKhDA,KAEMgC,EAAmBL,EAAnBK,KAAMC,EAAaN,EAAbM,SAEd,OACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAKtC,MAAOA,EAAOuC,YAAapC,GAAWgC,IAC3C,kBAAC,EAAD,CACEX,IAAKY,EACLpC,MAAOA,EACPE,KAAMA,EACND,KAAMA,EACNiC,OAAQA,EACR9B,WAAYA,EACZC,KAAMA,EACNC,KAAMA,EACNC,SAAUA,EACVC,KAAMA,EACNC,aAAc6B,EACd5B,SAAU2B","file":"component---src-templates-page-js-8e0eb3ce60433059095e.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"post\":\"post-module--post--2iiGQ\",\"title\":\"post-module--title--3CF5R\",\"coverImage\":\"post-module--coverImage--2AdMw\",\"meta\":\"post-module--meta--duw4c\",\"tags\":\"post-module--tags--2jRm2\",\"tag\":\"post-module--tag--3Tz-t\",\"readMore\":\"post-module--readMore--1HLfk\",\"postContent\":\"post-module--postContent--1132g\",\"markdowncontent\":\"post-module--markdowncontent--1Iqmb\"};","import React from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport { Link } from 'gatsby'\r\nimport Img from 'gatsby-image'\r\nimport Navigation from './navigation'\r\nimport { toKebabCase } from '../helpers'\r\n\r\nimport style from '../styles/post.module.css'\r\n\r\nconst Post = ({\r\n  title,\r\n  date,\r\n  path,\r\n  coverImage,\r\n  excerpt,\r\n  tags,\r\n  html,\r\n  location,\r\n  type,\r\n  previousPost,\r\n  nextPost,\r\n}) => {\r\n  const previousPath = previousPost && previousPost.frontmatter.path\r\n  const previousLabel = previousPost && previousPost.frontmatter.title\r\n  const nextPath = nextPost && nextPost.frontmatter.path\r\n  const nextLabel = nextPost && nextPost.frontmatter.title\r\n\r\n  return (\r\n    <div className={style.post}>\r\n      <div className={style.postContent}>\r\n        \r\n        <h1 className={style.title}>\r\n          {excerpt ? <Link to={path}>{title}</Link> : title}\r\n        </h1>\r\n\r\n        <div className={style.meta}>\r\n          {location ? (\r\n              <div className={style.tags}>\r\n                  <Link to={`/place/${toKebabCase(location).toLowerCase()}/`} key={toKebabCase(location)}>\r\n                      <span className={style.tag}>{location}</span>\r\n                  </Link>\r\n              </div>\r\n          ) : null}\r\n\r\n          {type ? (\r\n              <div className={style.tags}>\r\n                  <Link to={`/type/${toKebabCase(type).toLowerCase()}/`} key={toKebabCase(type)}>\r\n                      <span className={style.tag}>{type}</span>\r\n                  </Link>\r\n              </div>\r\n          ) : null}\r\n        </div>\r\n\r\n        {/* {coverImage && (\r\n          <Img\r\n            fluid={coverImage.childImageSharp.fluid}\r\n            className={style.coverImage}\r\n          />\r\n        )} */}\r\n\r\n        {excerpt ? (\r\n          <>\r\n            <p>{excerpt}</p>\r\n            <Link to={path} className={style.readMore}>\r\n              Read more â†’\r\n            </Link>\r\n          </>\r\n        ) : (\r\n          <>\r\n            <div className={style.markdowncontent} dangerouslySetInnerHTML={{ __html: html }} />\r\n            <Navigation\r\n              previousPath={previousPath}\r\n              previousLabel={previousLabel}\r\n              nextPath={nextPath}\r\n              nextLabel={nextLabel}\r\n            />\r\n          </>\r\n        )}\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nPost.propTypes = {\r\n  title: PropTypes.string,\r\n  date: PropTypes.string,\r\n  path: PropTypes.string,\r\n  coverImage: PropTypes.object,\r\n  excerpt: PropTypes.string,\r\n  html: PropTypes.string,\r\n  tags: PropTypes.arrayOf(PropTypes.string),\r\n  location: PropTypes.string,\r\n  type: PropTypes.string,\r\n  previousPost: PropTypes.object,\r\n  nextPost: PropTypes.object,\r\n}\r\n\r\nexport default Post\r\n","import React from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport { graphql } from 'gatsby'\r\n\r\nimport SEO from '../components/seo'\r\nimport Layout from '../components/layout'\r\nimport Post from '../components/post'\r\n\r\nconst BlogPostTemplate = ({ data, pageContext }) => {\r\n  const {\r\n    frontmatter: { title, date, path, author, coverImage, excerpt, tags, location, type },\r\n    excerpt: autoExcerpt,\r\n    id,\r\n    html,\r\n  } = data.markdownRemark\r\n  const { next, previous } = pageContext\r\n\r\n  return (\r\n    <Layout>\r\n      <SEO title={title} description={excerpt || autoExcerpt} />\r\n      <Post\r\n        key={id}\r\n        title={title}\r\n        date={date}\r\n        path={path}\r\n        author={author}\r\n        coverImage={coverImage}\r\n        html={html}\r\n        tags={tags}\r\n        location={location}\r\n        type={type}\r\n        previousPost={previous}\r\n        nextPost={next}\r\n      />\r\n    </Layout>\r\n  )\r\n}\r\n\r\nexport default BlogPostTemplate\r\n\r\nBlogPostTemplate.propTypes = {\r\n  data: PropTypes.object.isRequired,\r\n  pageContext: PropTypes.shape({\r\n    next: PropTypes.object,\r\n    previous: PropTypes.object,\r\n  }),\r\n}\r\n\r\nexport const pageQuery = graphql`\r\n  query($path: String) {\r\n    markdownRemark(frontmatter: { path: { eq: $path } }) {\r\n      frontmatter {\r\n        title\r\n        date(formatString: \"DD MMMM YYYY\")\r\n        path\r\n        author\r\n        excerpt\r\n        tags\r\n        location\r\n        type\r\n        coverImage {\r\n          childImageSharp {\r\n            fluid(maxWidth: 800) {\r\n              ...GatsbyImageSharpFluid\r\n            }\r\n          }\r\n        }\r\n      }\r\n      id\r\n      html\r\n      excerpt\r\n    }\r\n  }\r\n`\r\n"],"sourceRoot":""}